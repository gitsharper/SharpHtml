#region License
// 
// Author: Joe McLain <nmp.developer@outlook.com>
// Copyright (c) 2015, Joe McLain and Digital Writing
// 
// Licensed under Eclipse Public License, Version 1.0 (EPL-1.0)
// See the file LICENSE.txt for details.
// 
#endregion
#region Generated
//
// This file was generated by a tool on 8/18/2015 9:59:39 AM an should not be 
// modified unless removed from the "Others" directory and added to
// a different collection of Tags
//
// Any modifications will be lost the next time the file is generated.
//
#endregion
using System;
using System.Collections.Generic;
using System.Linq;

namespace SharpHtml {

	/////////////////////////////////////////////////////////////////////////////

	public static partial class CssTagExtensions {


		/////////////////////////////////////////////////////////////////////////////

		public static T Azimuth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "azimuth", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundAttachment<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-attachment", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundImage<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-image", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundPosition<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-position", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundRepeat<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-repeat", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Background<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottomColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottomStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottomWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottom<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderCollapse<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-collapse", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderLeftColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-left-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderLeftStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-left-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderLeftWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-left-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderLeft<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-left", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderRightColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-right-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderRightStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-right-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderRightWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-right-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderRight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-right", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderSpacing<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-spacing", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTopColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTopStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTopWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTop<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Border<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Bottom<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "bottom", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T CaptionSide<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "caption-side", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Clear<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "clear", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Clip<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "clip", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Color<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Content<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "content", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T CounterIncrement<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "counter-increment", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T CounterReset<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "counter-reset", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T CueAfter<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "cue-after", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T CueBefore<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "cue-before", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Cue<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "cue", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Cursor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "cursor", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Direction<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "direction", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Display<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "display", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Elevation<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "elevation", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T EmptyCells<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "empty-cells", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Float<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "float", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontFamily<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-family", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontSizeAdjust<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-size-adjust", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontSize<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-size", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontStretch<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-stretch", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontVariant<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-variant", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T FontWeight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font-weight", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Font<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "font", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Height<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "height", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Left<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "left", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T LetterSpacing<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "letter-spacing", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T LineHeight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "line-height", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ListStyleImage<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "list-style-image", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ListStylePosition<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "list-style-position", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ListStyleType<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "list-style-type", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ListStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "list-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarginBottom<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "margin-bottom", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarginLeft<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "margin-left", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarginRight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "margin-right", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarginTop<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "margin-top", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Margin<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "margin", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarkerOffset<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marker-offset", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Marks<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marks", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MaxHeight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "max-height", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MaxWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "max-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MinHeight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "min-height", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MinWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "min-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Orphans<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "orphans", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OutlineColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "outline-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OutlineStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "outline-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OutlineWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "outline-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Outline<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "outline", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Overflow<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "overflow", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PaddingBottom<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "padding-bottom", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PaddingLeft<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "padding-left", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PaddingRight<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "padding-right", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PaddingTop<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "padding-top", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Padding<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "padding", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PageBreakAfter<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "page-break-after", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PageBreakBefore<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "page-break-before", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PageBreakInside<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "page-break-inside", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Page<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "page", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PauseAfter<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "pause-after", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PauseBefore<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "pause-before", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Pause<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "pause", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PitchRange<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "pitch-range", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Pitch<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "pitch", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PlayDuring<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "play-during", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Position<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "position", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Quotes<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "quotes", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Richness<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "richness", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Right<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "right", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Size<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "size", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T SpeakHeader<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "speak-header", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T SpeakNumeral<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "speak-numeral", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T SpeakPunctuation<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "speak-punctuation", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Speak<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "speak", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T SpeechRate<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "speech-rate", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Stress<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "stress", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TableLayout<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "table-layout", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TextAlign<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "text-align", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TextDecoration<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "text-decoration", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TextIndent<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "text-indent", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TextShadow<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "text-shadow", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TextTransform<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "text-transform", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Top<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "top", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T UnicodeBidi<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "unicode-bidi", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T VerticalAlign<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "vertical-align", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Visibility<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "visibility", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T VoiceFamily<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "voice-family", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Volume<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "volume", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T WhiteSpace<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "white-space", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Widows<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "widows", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Width<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T WordSpacing<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "word-spacing", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ZIndex<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "z-index", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderRadius<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-radius", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTopLeftRadius<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top-left-radius", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderTopRightRadius<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-top-right-radius", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottomLeftRadius<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom-left-radius", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderBottomRightRadius<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-bottom-right-radius", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImage<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImageOutset<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image-outset", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImageRepeat<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image-repeat", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImageSource<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image-source", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImageSlice<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image-slice", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BorderImageWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "border-image-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BreakAfter<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "break-after", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BreakBefore<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "break-before", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BreakInside<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "break-inside", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Columns<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "columns", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnCount<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-count", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnFill<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-fill", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnGap<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-gap", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnRule<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-rule", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnRuleColor<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-rule-color", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnRuleStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-rule-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnRuleWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-rule-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnSpan<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-span", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T ColumnWidth<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "column-width", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Keframes<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "@keframes", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Animation<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationDelay<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-delay", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationDirection<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-direction", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationDuration<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-duration", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationFillMode<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-fill-mode", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationIterationCount<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-iteration-count", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationName<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-name", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationPlayState<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-play-state", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T AnimationTimingFunction<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "animation-timing-function", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Transition<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transition", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransitionDelay<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transition-delay", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransitionDuration<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transition-duration", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransitionTimingFunction<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transition-timing-function", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransitionProperty<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transition-property", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackfaceVisibility<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "backface-visibility", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Perspective<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "perspective", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T PerspectiveOrigin<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "perspective-origin", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Transform<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transform", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransformOrigin<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transform-origin", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T TransformStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "transform-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundClip<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-clip", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundOrigin<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-origin", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BackgroundSize<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "background-size", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OverflowX<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "overflow-x", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OverflowY<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "overflow-y", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T OverflowStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "overflow-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarqueeDirection<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marquee-direction", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarqueePlayCount<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marquee-play-count", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarqueeSpeed<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marquee-speed", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T MarqueeStyle<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "marquee-style", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T LinearGradient<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "linear-gradient", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T RadialGradient<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "radial-gradient", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T RepeatingLinearGradient<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "repeating-linear-gradient", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BoxShadow<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "box-shadow", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T BoxDecorationBreak<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "box-decoration-break", values );
			return styles as T;
		}



		/////////////////////////////////////////////////////////////////////////////

		public static T Opacity<T>( this IStyles<T> styles, string values )
			where T : class
		{
			styles.AddStyle( "opacity", values );
			return styles as T;
		}



	}
}
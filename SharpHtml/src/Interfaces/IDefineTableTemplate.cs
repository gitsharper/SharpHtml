#region License
// 
// Author: Joe McLain <nmp.developer@outlook.com>
// Copyright (c) 2015, Joe McLain and Digital Writing
// 
// Licensed under Eclipse Public License, Version 1.0 (EPL-1.0)
// See the file LICENSE.txt for details.
// 
#endregion
using System;
using System.Collections.Generic;
using System.Linq;

namespace SharpHtml {

	public interface IDefineTableTemplate {

		IDefineTableTemplate SetCaption( string caption );
		IDefineTableTemplate SetId( string id );
		IDefineTableTemplate SetBorder( string border );

		/// <summary>
		/// 
		/// Set a callback to be invoked when a table has been generated by a template instance
		/// 
		/// </summary>
		/// <param name="action"></param>
		/// <returns></returns>
		IDefineTableTemplate SetOnCreate( Action<Table> action );

		/// <summary>
		/// 
		/// Set column widths. These will end up as the widths supplied in the nth:Child()
		/// entries for the table header, if there is no data supplied for the table header
		/// data (th tags) then empty tags will be added
		/// 
		/// </summary>
		/// <param name="widths"></param>
		/// <returns></returns>
		IDefineTableTemplate SetColumnWidths( params string [] widths );

		/// <summary>
		/// 
		/// Adds a new row and 'nColumns' to that row, styles are supplied by 'styles', if 'stylesFunc'
		/// is supplied it is called after 'styles' are added to the current columns style dictionary
		/// allowing the callback to modify it
		/// 
		/// While you can add multiple rows by calling SetDefaultStyles() more than once for Header/Body/Footer
		/// only the first row is currently used
		/// 
		/// The style information is added to the <style> section of the <header> using nth:Child() notation
		/// 
		/// </summary>
		/// <param name="section"></param>
		/// <param name="stylesFunc"></param>
		/// <param name="nColumns"></param>
		/// <param name="styles"></param>
		/// <returns></returns>
		IDefineTableTemplate SetDefaultStyles( TableSectionId section, StylesFunc stylesFunc, int nColumns, params string [] styles );

		//
		// set styles, each IEnumerable<string> will contain the styles for a single
		// column
		//
		/// <summary>
		/// Rather than setting all the styles the same and then allowing them to be modified by callbacks
		/// as is done by SetDefaultStyles(), AddStyles() allows you to add styles individually for each
		/// column.
		/// 
		/// The styles are passed as an array of IEnumerable<string>, you pass one IEnumerable<string> for
		/// each column. If you are using a C# 6 compatible compiler you can use the Content(...) method found
		/// in TableTemplate.cs without having to prepend "TableTemplate" as in TableTemplate.Contents() if you
		/// use "using static SharpHtml.TableTemplate;" at the top of your file
		/// 
		/// The style information is added to the <style> section of the <header> using nth:Child() notation
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="styles"></param>
		/// <returns></returns>
		IDefineTableTemplate AddStyles( TableSectionId id, params IEnumerable<string> [] styles );


		/// <summary>
		/// 
		/// Creates a new row, values passed in may be: strings, IEnumerable<string>,
		/// or CellFunc's
		/// 
		/// A string is added as the cell value without attribute or style information
		/// 
		///   .e.g.   template.AddRow( "cell 1", "cell 2", "cell 3" );
		/// 
		/// An IEnumerable<string> will have its first entry used as the value for the 
		/// cell, and the remaining strings will be used to set attributes and inline
		/// styles on the cell
		/// 
		///   .e.g.   template.AddRow( Content( "cell value", "colspan = 2", "color : red", "font-style :italic" ), "cell 2", "cell 3" );
		/// 
		/// Content is a static method, bring into scope like this "using static SharpHtml.TableTemplate;" if using C# 6 or later,
		/// if using an earlier version you'll need to use TableTemplate.Content(...), or roll your own Content() method
		/// 
		/// A CellFunc is provided as a lambda where you modify the Tag that is passed in, if you return a Tag that
		/// tag will become the child of the Tag that was passed in to the lambda
		/// 
		/// Additionally a CellFunc can be passed in as an AddRow() argument, if not null that CellFunc will be
		/// called for each cell of data as it is added
		/// 
		/// All styles are added as inline styles on the contend tag (TD for body and footer, TH for the table
		/// header)
		/// 
		/// </summary>
		/// <param name="id"></param>
		/// <param name="cellFunc"></param>
		/// <param name="values"></param>
		/// <returns></returns>
		IDefineTableTemplate AddRow( TableSectionId id, CellFunc cellFunc, params object [] values );

		/// <summary>
		/// Create a table instance on which you add the data for the table you want to generate
		/// </summary>
		/// <returns></returns>
		IActiveTableTemplate CreateTemplateInstance();

	}

}
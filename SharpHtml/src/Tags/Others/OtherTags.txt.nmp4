#.pushBuffer(-1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;

(#defmacro `ctorValueText', `name')
.break.
		/////////////////////////////////////////////////////////////////////////////

		public $name( string text )
		{
			SetValue( text );
		}
(#endmacro)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(#defmacro `#makeTag', `name', `renderMode', `align', `includeInTag', `code')

$local.Set( `renderMode', #.ifEmpty($renderMode, `Normal', `$renderMode') )
$local.Set( `align', #.ifEmpty($align, `Vertical', `$align') )
$local.Set( `includeInTag', #.ifEmpty($renderMode, `IncludeInTag', `$includeInTag') )

.{#region License
// 
// Author: Joe McLain <nmp.developer@outlook.com>
// Copyright (c) 2015, Joe McLain and Digital Writing
// 
// Licensed under Eclipse Public License, Version 1.0 (EPL-1.0)
// See the file LICENSE.txt for details.
// 
#endregion
#region Generated
//
// This file was generated by a tool on #.dateTime an should not be 
// modified unless removed from the "Others" directory and added to
// a different collection of Tags
//
// Any modifications will be lost the next time the file is generated.
//
#endregion
using System;
using System.Collections.Generic;
using System.Linq;

namespace SharpHtml {

	/////////////////////////////////////////////////////////////////////////////

	public class $name : Tag {
		protected override string _TagName => "$@name.ToLower()";
(#if #.isNotEmpty($renderMode))
		protected override TagRenderMode RenderMode => TagRenderMode.$local.renderMode;
(#endif)
;;		protected override TagFormatOptions MultipleTagFormatAlign => TagFormatOptions.$local.align;
;;		public override StyleMode StyleMode => StyleMode.$local.includeInTag;

(#if #.isNotEmpty(`$code'))
;;
;; we expect to be passed the name of a macro that contains a list of strings each of which 
;; is the name of a macro that we should invoke passing the name of the Tag being created
;;
;; this allows extra code like ctor's with values to be added to the class
;;
#.foreach( $code, `@$$value( $name )' )
(#endif)

		/////////////////////////////////////////////////////////////////////////////

		public $name()
		{		
		}
	}

}}.
(#endmacro)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(#defmacro `NewTag', `name', `renderMode', `align', `includeInTag', `code' )

$local.Set( `tagName', $@name.ToUpper().Substring(0, 1)`'$@name.Substring(1) )

	#makeTag( $local.tagName, $renderMode, $align, $includeInTag, `$code' )@divert( `temp')
	#.saveBuffer( $local.tagName`'.cs, `temp', true )
(#endmacro)

#.popBuffer()

;;
;; macro that is a list whose single entry is 'ctorValueText' so we
;; pass it without continually recreating it
;;
 #.define( `cvt', #.createNewStringList( `ctorValueText' ) )


NewTag( abbr, , , )
;;NewTag( a, , , )
NewTag( abbr, , , )
NewTag( address, , , )
NewTag( area, , , )
NewTag( article, , , )
NewTag( aside, , , )
NewTag( audio, , , )
NewTag( b, , , )
NewTag( base, VoidTag, , )
NewTag( bdi, , , )
NewTag( bdo, , , )
NewTag( blockquote, , , )
;;NewTag( body, , , )
NewTag( br, VoidTag, , )
NewTag( button, , , )
NewTag( canvas, , , )
;;NewTag( caption, , , )
NewTag( cite, , , )
NewTag( code, , , )
;;NewTag( col, VoidTag, , )
;;NewTag( colgroup, , , )
NewTag( data, , , )
NewTag( datalist, , , )
;;NewTag( dd, , , )
NewTag( del, , , )
NewTag( details, , , )
NewTag( dfn, , , )
NewTag( dialog, , , )
NewTag( div, , , )
;;NewTag( dl, , , )
;;NewTag( dt, , , )
NewTag( em, , , )
NewTag( embed, VoidTag, , )
NewTag( fieldset, , , )
NewTag( figcaption, , , )
NewTag( figure, , , )
NewTag( footer, , , )
NewTag( form, , , )
NewTag( h1, , , , `cvt' )
NewTag( h2, , , , `cvt' )
NewTag( h3, , , , `cvt' )
NewTag( h4, , , , `cvt' )
NewTag( h5, , , , `cvt' )
NewTag( h6, , , , `cvt' )
;;NewTag( head, , , )
NewTag( header, , , )
NewTag( hgroup, , , )
NewTag( hr, VoidTag, , )
;;NewTag( html, , , )
NewTag( i, , , )
NewTag( iframe, , , )
NewTag( img, VoidTag, , )
NewTag( input, VoidTag, , )
NewTag( ins, , , )
NewTag( kbd, , , )
NewTag( keygen, VoidTag, , )
NewTag( label, , , )
NewTag( legend, , , )
;;NewTag( li, , , )
;;NewTag( link, VoidTag, , )
NewTag( main, , , )
NewTag( map, , , )
NewTag( mark, , , )
NewTag( menu, , , )
NewTag( menuitem, , , )
;;NewTag( meta, VoidTag, , )
NewTag( meter, , , )
NewTag( nav, , , )
NewTag( noscript, , , )
NewTag( object, , , )
;;NewTag( ol, , , )
NewTag( optgroup, , , )
NewTag( option, , , )
NewTag( output, , , )
NewTag( p, , , , `cvt' )
NewTag( param, VoidTag, , )
NewTag( pre, , , )
NewTag( progress, , , )
NewTag( q, , , )
NewTag( rb, , , )
NewTag( rp, , , )
NewTag( rt, , , )
NewTag( rtc, , , )
NewTag( ruby, , , )
NewTag( s, , , )
NewTag( samp, , , )
;;NewTag( script, , , )
NewTag( section, , , )
NewTag( select, , , )
NewTag( small, , , )
NewTag( source, VoidTag, , )
;;NewTag( span, , , )
NewTag( strong, , , )
;;NewTag( style, , , )
NewTag( sub, , , )
NewTag( summary, , , )
NewTag( sup, , , )
;;NewTag( table, , , )
;;NewTag( tbody, , , )
;;NewTag( td, , , )
NewTag( template, , , )
NewTag( textarea, , , )
;;NewTag( tfoot, , , )
;;NewTag( th, , , )
;;NewTag( thead, , , )
NewTag( time, , , )
;;NewTag( title, , , )
;;NewTag( tr, , , )
NewTag( track, VoidTag, , )
NewTag( u, , , )
;;NewTag( ul, , , )
NewTag( var, , , )
NewTag( video, , , )
NewTag( wbr, VoidTag, , )




